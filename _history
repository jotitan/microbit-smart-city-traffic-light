{"entries":[{"timestamp":1735600645043,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":248,"start2":248,"length1":32,"length2":31}]}]},{"timestamp":1735600935342,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," {\n\t\n})\n"],[-1,"\n\n"]],"start1":25,"start2":25,"length1":10,"length2":8}]}]},{"timestamp":1735601521125,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,")\n\n\n"],[-1,"class Light {\n    constructor(private state:Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop){\n        this.stop();\n    }\n    stop(){\n        k\n    }\n\n}"]],"start1":31,"start2":31,"length1":172,"length2":4}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"pxt-kitronik-stopbit\": \"github:kitronikltd/pxt-kitronik-stopbit#v1.1.2\""],[0,"\n   "]],"start1":151,"start2":151,"length1":90,"length2":8}]}]},{"timestamp":1735602120136,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  this.s"],[-1,"how"],[1,"top"],[0,"();\n    "]],"start1":152,"start2":152,"length1":19,"length2":19},{"diffs":[[0,"   s"],[-1,"how"],[1,"top"],[0,"(){\n"]],"start1":174,"start2":174,"length1":11,"length2":11},{"diffs":[[0,"    "],[-1,"Kitronik_STOPbit.trafficLightState(this.state);"],[1,"k"],[0,"\n   "]],"start1":189,"start2":189,"length1":55,"length2":9}]}]},{"timestamp":1735602506388,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    }\n\n}"],[-1,"\n\n"]],"start1":241,"start2":241,"length1":10,"length2":8}]}]},{"timestamp":1735764806582,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n\n}\n\n"],[-1,"clas"]],"start1":243,"start2":243,"length1":12,"length2":8}]}]},{"timestamp":1735764808199,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"enum CrossRoadType {Line, Cross, T}\nenum CrossRoadPosition {A, B, C}\n\nclass LightManager{\n    transmit: RadioTransmit\n    receiver: RadioReceiver\n    constructor(private group: number, private crossRoadType: CrossRoadType, private position: CrossRoadPosition){\n        this.transmit = new RadioTransmit(this);\n        this.receiver = new RadioReceiver(this);\n    }\n}\n\n// Send messages to all\nclass RadioTransmit{\n    constructor(private manager: LightManager){}\n}\n\nclass RadioReceiver{\n    constructor(private manager: LightManager) { }\n}"],[1,"clas"]],"start1":247,"start2":247,"length1":542,"length2":8}]}]},{"timestamp":1735765377238,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") { "],[-1,"\n        radio.onReceivedBuffer(buffer=>{\n            buffer.toString()\n        })\n        \n    }\n}\n\n\n/* Configuration */\nclass Configuration{\n    constructor(){\n        new GroupConfig(()=>this.showCrossroadTypeConfig());\n    }\n    showCrossroadTypeConfig(){}\n}\n\n// Choose group crossroad, crossroad type, then position\nclass GroupConfig {\n    constructor(next:()=>void,private group:number = 0){\n        input.onButtonPressed(Button.A, () => this.increaseGroupNumber());\n        input.onButtonPressed(Button.B, next);\n        this.show();\n    }\n    increaseGroupNumber(){\n        this.group = (this.group + 1)%10;\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.group)\n    }\n}\n\n"],[1,"}\n}"]],"start1":782,"start2":782,"length1":705,"length2":7}]}]},{"timestamp":1735765854029,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"g(){"],[-1,"\n\n    }\n    showCrossroadPosition(){"],[0,"}\n}\n"]],"start1":1041,"start2":1041,"length1":44,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"class TypeConfig {\n    constructor(next: () => void, private group: number = 0) {\n        input.onButtonPressed(Button.A, () => this.increaseType());\n        input.onButtonPressed(Button.B, next);\n        this.show();\n    }\n}\n"]],"start1":1483,"start2":1483,"length1":230,"length2":4}]}]},{"timestamp":1735766212555,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rossRoad"],[-1,"Kind"],[1,"Type"],[0," {Line, "]],"start1":257,"start2":257,"length1":20,"length2":20},{"diffs":[[0,"\n\nclass "],[-1,"Kind"],[1,"Type"],[0,"Config {"]],"start1":1521,"start2":1521,"length1":20,"length2":20},{"diffs":[[0,"ate "],[-1,"kind: CrossRoadKind = CrossRoadKind.Line"],[1,"group: number = 0"],[0,") {\n"]],"start1":1580,"start2":1580,"length1":48,"length2":25},{"diffs":[[0,"utton.B, next);\n"],[1,""],[0,"        this.sho"]],"start1":1704,"start2":1704,"length1":32,"length2":32},{"diffs":[[0,"  }\n"],[-1,"    increaseType(){\n        switch (this.kind) {\n            case CrossRoadKind.Line: break;\n            case CrossRoadKind.Cross: break;\n            case CrossRoadKind.T: break;\n        }\n    }\n    show(){\n        switch(this.kind){\n            case CrossRoadKind.Line:break;\n            case CrossRoadKind.Cross: break;\n            case CrossRoadKind.T: break;\n        }\n    }\n"],[0,"}\n"]],"start1":1743,"start2":1743,"length1":385,"length2":6}]}]},{"timestamp":1735766812265,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rossRoad"],[-1,"Kind"],[1,"Type"],[0,", privat"]],"start1":460,"start2":460,"length1":20,"length2":20},{"diffs":[[0,"Config(("],[-1,"group:number"],[0,")=>this."]],"start1":965,"start2":965,"length1":28,"length2":16},{"diffs":[[0,"eConfig("],[-1,"group"],[0,"));\n    "]],"start1":997,"start2":997,"length1":21,"length2":16},{"diffs":[[0,"fig("],[-1,"group:number){\n        new KindConfig((kind: CrossRoadKind)=>this.showCrossroadPosition(kind));"],[1,"){\n"],[0,"\n   "]],"start1":1039,"start2":1039,"length1":103,"length2":11},{"diffs":[[0,"osition("],[-1,"kind: CrossRoadKind"],[0,"){}\n}\n\n/"]],"start1":1071,"start2":1071,"length1":35,"length2":16},{"diffs":[[0,"r(next:("],[-1,"group:number"],[0,")=>void,"]],"start1":1177,"start2":1177,"length1":28,"length2":16},{"diffs":[[0,".B, "],[-1,"()=>next(this.group)"],[1,"next"],[0,");\n "]],"start1":1331,"start2":1331,"length1":28,"length2":12},{"diffs":[[0,"t: ("],[-1,"kind:CrossRoadKind"],[0,") =>"]],"start1":1561,"start2":1561,"length1":26,"length2":8},{"diffs":[[0,".B, "],[-1,"() => next(this.kind)"],[1,"next"],[0,");\n "]],"start1":1732,"start2":1732,"length1":29,"length2":12},{"diffs":[[0,"ne: "],[-1,"this.kind = CrossRoadKind.Cross;"],[0,"brea"]],"start1":1852,"start2":1852,"length1":40,"length2":8},{"diffs":[[0,"oss:"],[-1," this.kind = CrossRoadKind.T;"],[0," bre"]],"start1":1896,"start2":1896,"length1":37,"length2":8},{"diffs":[[0,".T: "],[-1,"this.kind = CrossRoadKind.Line;"],[0,"brea"]],"start1":1938,"start2":1938,"length1":39,"length2":8},{"diffs":[[0,"(){\n"],[-1,"        this.\n"],[0,"    "]],"start1":1973,"start2":1973,"length1":22,"length2":8}]}]},{"timestamp":1735767409055,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"basic.showIcon(IconNames.SmallHeart)"],[1,"this."],[0,"\n   "]],"start1":2264,"start2":2264,"length1":44,"length2":13}]}]},{"timestamp":1735767493093,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rt)\n"],[-1,"        new Ima\n"],[0,"    "]],"start1":2301,"start2":2301,"length1":24,"length2":8}]}]},{"timestamp":1735768485130,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rt)\n        "],[1,"new Ima"],[0,"\n        swi"]],"start1":2301,"start2":2301,"length1":24,"length2":31}]}]},{"timestamp":1735768581616,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rivate crossRoad"],[-1,"Kind"],[1,"Type"],[0,": CrossRoadKind,"]],"start1":437,"start2":437,"length1":36,"length2":36},{"diffs":[[0,"tor("],[-1,"private group: number, private crossRoadKind: CrossRoadKind, private position: CrossRoadPosition"],[0,"){\n "]],"start1":941,"start2":941,"length1":104,"length2":8},{"diffs":[[0,"r){\n"],[-1,"        this.group = group;\n"],[0,"    "]],"start1":1071,"start2":1071,"length1":36,"length2":8},{"diffs":[[0,"nd){"],[-1,"\n        this.crossRoadKind = kind;\n    "],[0,"}\n}\n"]],"start1":1205,"start2":1205,"length1":48,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"// Choose group crossroad, crossroad type, then position\nclass PositionConfig {\n    constructor(next: (group: number) => void, private group: number = 0) {\n        input.onButtonPressed(Button.A, () => this.increaseGroupNumber());\n        input.onButtonPressed(Button.B, () => next(this.group));\n        this.show();\n    }\n    increaseGroupNumber() {\n        this.group = (this.group + 1) % 10;\n        this.show();\n    }\n    show() {\n        basic.showNumber(this.group)\n    }\n}\n\n"],[0,"clas"]],"start1":1675,"start2":1675,"length1":489,"length2":8},{"diffs":[[0,"    "],[1,"}\n"],[0,"    "],[-1,"this."],[0,"show()"],[-1,";"],[1,"{"],[0,"\n    "],[-1,"}\n"],[0,"    "],[-1,"show(){"],[1,"basic.showIcon(IconNames.SmallHeart)\n        "],[0,"\n   "]],"start1":2242,"start2":2242,"length1":42,"length2":75},{"diffs":[[0,"ine:"],[-1,"basic.showArrow(2);"],[0,"brea"]],"start1":2373,"start2":2373,"length1":27,"length2":8},{"diffs":[[0,"ss: "],[-1,"basic.showIcon(3);"],[0,"brea"]],"start1":2418,"start2":2418,"length1":26,"length2":8},{"diffs":[[0,".T: "],[-1,"basic.showString(\"T\");"],[0,"brea"]],"start1":2459,"start2":2459,"length1":30,"length2":8},{"diffs":[[0,"}\n}\n"],[-1,"new Configuration();"]],"start1":2484,"start2":2484,"length1":24,"length2":4}]}]},{"timestamp":1735769167540,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"(next: ("],[-1,"position: string"],[1,"group: number"],[0,") => voi"]],"start1":1938,"start2":1938,"length1":32,"length2":29},{"diffs":[[0,"ate "],[-1,"position: string = \"A\""],[1,"group: number = 0"],[0,") {\n"]],"start1":1974,"start2":1974,"length1":30,"length2":25},{"diffs":[[0,"increase"],[-1,"Position"],[1,"GroupNumber"],[0,"());\n   "]],"start1":2050,"start2":2050,"length1":24,"length2":27},{"diffs":[[0,"xt(this."],[-1,"position"],[1,"group"],[0,"));\n    "]],"start1":2122,"start2":2122,"length1":24,"length2":21},{"diffs":[[0,"increase"],[-1,"Position"],[1,"GroupNumber"],[0,"() {\n   "]],"start1":2170,"start2":2170,"length1":24,"length2":27},{"diffs":[[0,"    "],[-1,"\n        this.position"],[1,"this.group"],[0," = ("]],"start1":2198,"start2":2198,"length1":30,"length2":18},{"diffs":[[0,"show"],[-1,"String(this.position"],[1,"Number(this.group"],[0,")\n  "]],"start1":2292,"start2":2292,"length1":28,"length2":25}]}]},{"timestamp":1735769826889,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"text"],[0,"\n   "]],"start1":2203,"start2":2203,"length1":12,"length2":8}]}]},{"timestamp":1735769849351,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"   t"],[-1,"his.position = this.position.charAt(0) + 1;"],[1,"ext"],[0,"\n   "]],"start1":2204,"start2":2204,"length1":51,"length2":11},{"diffs":[[0,"        "],[-1,"//"],[0,"this.pos"]],"start1":2212,"start2":2212,"length1":18,"length2":16},{"diffs":[[0,"    }\n}\n"],[-1,"//"],[0,"new Conf"]],"start1":3175,"start2":3175,"length1":18,"length2":16},{"diffs":[[0,"n();"],[-1,"\nlet val = \"A\";\nval = val.charAt(0) + 1;\nconsole.log(val)"]],"start1":3199,"start2":3199,"length1":61,"length2":4}]}]},{"timestamp":1735769905303,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"onfig {\n"],[-1,"    \n"],[0,"    cons"]],"start1":1915,"start2":1915,"length1":21,"length2":16}]}]},{"timestamp":1735771076636,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"g {\n    "],[-1,"position:"],[0,"\n    con"]],"start1":1919,"start2":1919,"length1":25,"length2":16}]}]},{"timestamp":1735771077995,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"B, C"],[-1,", D"],[0,"}\n"],[1,""],[0,"\ncla"]],"start1":314,"start2":314,"length1":13,"length2":10},{"diffs":[[0,"      })"],[1,"\n     "],[0,"   \n    "]],"start1":860,"start2":860,"length1":16,"length2":22},{"diffs":[[0,": number"],[-1," = 0"],[0,", privat"]],"start1":958,"start2":958,"length1":20,"length2":16},{"diffs":[[0,"RoadKind"],[-1," = CrossRoadKind.Line"],[0,", privat"]],"start1":996,"start2":996,"length1":37,"length2":16},{"diffs":[[0,"on: "],[-1,"string = 'A'"],[1,"CrossRoadPosition"],[0,"){\n "]],"start1":1020,"start2":1020,"length1":20,"length2":25},{"diffs":[[0,"nd;\n"],[-1,"        new PositionConfig((position:string)=>this.complete(position))\n    }\n    complete(position: string){\n\n"],[0,"    "]],"start1":1365,"start2":1365,"length1":118,"length2":8},{"diffs":[[0,"tion"],[-1,"s:string[] = ['A','B','C','D']"],[1,":"],[0,"\n   "]],"start1":1931,"start2":1931,"length1":38,"length2":9},{"diffs":[[0,"    "],[-1," const pos ="],[0," thi"]],"start1":2216,"start2":2216,"length1":20,"length2":8},{"diffs":[[0,"tion"],[-1,"s.indexOf("],[1," = "],[0,"this"]],"start1":2230,"start2":2230,"length1":18,"length2":11},{"diffs":[[0,"position"],[-1,")"],[1,".charAt(0) + 1"],[0,";\n      "]],"start1":2242,"start2":2242,"length1":17,"length2":30},{"diffs":[[0,"0) + 1;\n        "],[1,"//"],[0,"this.position = "]],"start1":2258,"start2":2258,"length1":32,"length2":34},{"diffs":[[0,"n = "],[1,"("],[0,"this."],[-1,"positions[(pos+1)%4]"],[1,"group + 1) % 10"],[0,";\n  "]],"start1":2288,"start2":2288,"length1":33,"length2":29},{"diffs":[[0,"    }\n}\n"],[1,"//"],[0,"new Conf"]],"start1":3231,"start2":3231,"length1":16,"length2":18},{"diffs":[[0,"guration();\n"],[1,"let val = \"A\";\nval = val.charAt(0) + 1;\nconsole.log(val)"]],"start1":3250,"start2":3250,"length1":12,"length2":68}]}]},{"timestamp":1735771668757,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"g)=>"],[-1,"console.log"],[1,"this.complete"],[0,"(pos"]],"start1":1428,"start2":1428,"length1":19,"length2":21},{"diffs":[[0,"g){\n"],[-1,"        this.position = position;"],[0,"\n   "]],"start1":1491,"start2":1491,"length1":41,"length2":8}]}]},{"timestamp":1735772263058,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"on: "],[-1,"CrossRoadPosition = CrossRoadPosition.A"],[1,"string = 'A'"],[0,"){\n "]],"start1":1042,"start2":1042,"length1":47,"length2":20},{"diffs":[[0,"ion:"],[-1," CrossRoadPosition) => this.complete"],[1,"string)=>console.log"],[0,"(pos"]],"start1":1419,"start2":1419,"length1":44,"length2":28},{"diffs":[[0,"ion)"],[-1,",'A'"],[0,")\n  "]],"start1":1449,"start2":1449,"length1":12,"length2":8},{"diffs":[[0,"sition: "],[-1,"CrossRoadPosition"],[1,"string"],[0,"){\n     "]],"start1":1476,"start2":1476,"length1":33,"length2":22},{"diffs":[[0,"sition: "],[-1,"CrossRoadPosition"],[1,"string"],[0,") => voi"]],"start1":2149,"start2":2149,"length1":33,"length2":22},{"diffs":[[0,": string"],[1," = \"A\""],[0,") {\n    "]],"start1":2190,"start2":2190,"length1":16,"length2":22},{"diffs":[[0,"his."],[-1,"get()));\n        this.show();\n    }\n    get(): CrossRoadPosition {\n        switch (this.position) {\n            case 'A': return CrossRoadPosition.A;\n            case 'B': return CrossRoadPosition.B;\n            case 'C': return CrossRoadPosition.C;\n            case 'D': return CrossRoadPosition.D;\n            default: return CrossRoadPosition.A;\n        }"],[1,"position));\n        this.show();"],[0,"\n   "]],"start1":2332,"start2":2332,"length1":366,"length2":40}]}]},{"timestamp":1735772537303,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n}\n\n\n"],[-1,"\n"],[0,"/* Confi"]],"start1":877,"start2":877,"length1":17,"length2":16}]}]},{"timestamp":1735845564815,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"   }\n}\n\n"],[-1,":"],[0,"\n\n/* Con"]],"start1":876,"start2":876,"length1":17,"length2":16}]}]},{"timestamp":1735845566408,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"s);\n"],[-1,"        basic.showIcon(IconNames.Tortoise)\n"],[0,"    }\n"],[1,""],[0,"}\n\n/"]],"start1":609,"start2":609,"length1":57,"length2":14},{"diffs":[[0,"   }\n}\n\n"],[1,":\n\n"],[0,"/* Confi"]],"start1":876,"start2":876,"length1":16,"length2":19},{"diffs":[[0,"ind.Line"],[1,", private position: CrossRoadPosition = CrossRoadPosition.A"],[0,"){\n     "]],"start1":1020,"start2":1020,"length1":16,"length2":75},{"diffs":[[0,"    "],[-1,"new LightManager(this.group, this.crossRoadKind,"],[1,"this.position ="],[0," pos"]],"start1":1557,"start2":1557,"length1":56,"length2":23},{"diffs":[[0,"ition = position"],[-1,")"],[1,";"],[0,"\n    }\n}\n\n// Cho"]],"start1":1569,"start2":1569,"length1":33,"length2":33}]}]},{"timestamp":1735845771371,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ver\n"],[-1,"    \n"],[0,"    "]],"start1":396,"start2":396,"length1":13,"length2":8}]}]},{"timestamp":1735847051233,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ver\n    "],[-1,"state:"],[0,"\n    con"]],"start1":396,"start2":396,"length1":22,"length2":16}]}]},{"timestamp":1735847055934,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ate:"],[-1," Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop"],[0,"\n   "]],"start1":406,"start2":406,"length1":73,"length2":8},{"diffs":[[0,"ructor(p"],[-1,"ublic"],[1,"rivate"],[0," group: "]],"start1":420,"start2":420,"length1":21,"length2":22},{"diffs":[[0,"umber, p"],[-1,"ublic"],[1,"rivate"],[0," crossRo"]],"start1":443,"start2":443,"length1":21,"length2":22},{"diffs":[[0,"d, p"],[-1,"ublic"],[1,"rivate"],[0," pos"]],"start1":485,"start2":485,"length1":13,"length2":14},{"diffs":[[0,"  }\n"],[-1,"    askAccess(){\n        if(this.state === Kitronik_STOPbit.LightStates.Go){\n            return;\n        }\n\n    }\n}\n\nenum Event {\n    ASK_ACCESS = \"ask\"\n\n"],[0,"}\n\n/"]],"start1":669,"start2":669,"length1":162,"length2":8},{"diffs":[[0,"){}\n"],[-1,"    askAccess(){\n        radio.sendBuffer(`${Event.ASK_ACCESS}:${this.manager.}:${}`)\n    }\n"],[0,"}\n\nc"]],"start1":766,"start2":766,"length1":100,"length2":8}]}]},{"timestamp":1735847299480,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"manager."],[-1,"group"],[0,"}:${}`)\n"]],"start1":1056,"start2":1056,"length1":21,"length2":16}]}]},{"timestamp":1735851090239,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"roup}:${"],[-1,"this.manager."],[0,"}`)\n    "]],"start1":1065,"start2":1065,"length1":29,"length2":16}]}]},{"timestamp":1735851102289,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"CCESS = "],[-1,"1"],[1,"\"ask\""],[0,"\n\n}\n\n// "]],"start1":874,"start2":874,"length1":17,"length2":21},{"diffs":[[0,"dio.send"],[-1,"String"],[1,"Buffer"],[0,"(`${Even"]],"start1":1013,"start2":1013,"length1":22,"length2":22},{"diffs":[[0,"manager."],[-1,"position"],[0,"}`)\n    "]],"start1":1078,"start2":1078,"length1":24,"length2":16},{"diffs":[[0,"ived"],[-1,"String(message"],[1,"Buffer(buffer"],[0,"=>{\n"]],"start1":1190,"start2":1190,"length1":22,"length2":21},{"diffs":[[0,"    "],[-1,"const event = parseInt(message.split(\":\")[0]);\n            const group = parseInt(message.split(\":\")[1]);\n            const position = message.split(\":\")[2];\n            this.manage(event, group, position)\n        })   \n    }\n    manage(event:number, group:number, position:string){\n        if(Event.ASK_ACCESS. === event){\n\n        }"],[1,"buffer.toString()\n        })   "],[0,"\n   "]],"start1":1219,"start2":1219,"length1":342,"length2":39}]}]},{"timestamp":1735851702144,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"s);\n"],[-1,"        input.onButtonPressed(Button.A,()=>this.askAccess())\n"],[0,"    "]],"start1":682,"start2":682,"length1":69,"length2":8},{"diffs":[[0," if("],[-1,"group !== this.manager.group){\n            return; // Ignore other group\n        }\n        switch(event){\n            case "],[0,"Even"]],"start1":1518,"start2":1518,"length1":131,"length2":8},{"diffs":[[0,"CESS"],[-1,":break;"],[1,". === event){\n"],[0,"\n   "]],"start1":1534,"start2":1534,"length1":15,"length2":22}]}]},{"timestamp":1735852284237,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"turn;\n        }\n"],[1,"\n"],[0,"    }\n}\n\nenum Ev"]],"start1":887,"start2":887,"length1":32,"length2":33}]}]},{"timestamp":1735853864617,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n"],[-1,"    \n"],[0,"}\n\ne"]],"start1":905,"start2":905,"length1":13,"length2":8}]}]},{"timestamp":1735853865668,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"D}\n\n"],[-1,"function getCrossRoadPosition(position:string):CrossRoadPosition {\n    switch (position) {\n        case 'A': return CrossRoadPosition.A;\n        case 'B': return CrossRoadPosition.B;\n        case 'C': return CrossRoadPosition.C;\n        case 'D': return CrossRoadPosition.D;\n        default: return CrossRoadPosition.A;\n    }\n}\n\n"],[0,"clas"]],"start1":320,"start2":320,"length1":337,"length2":8},{"diffs":[[0,"    "],[-1,"receiveAskAccess(position:CrossRoadPosition){\n        if(position === this.position){\n            return;\n        }\n        if(this.state === Kitronik_STOPbit.LightStates.Stop){\n            // Already stop\n\n        }\n    }"],[0,"\n}\n\n"]],"start1":909,"start2":909,"length1":230,"length2":8},{"diffs":[[0," = 1"],[-1,",\n    STOPPED = 2,\n    TO_STOP = 3"],[0,"\n\n}\n"]],"start1":944,"start2":944,"length1":42,"length2":8},{"diffs":[[0,"  }\n"],[-1,"    sayStopped(){\n        radio.sendString(`${Event.STOPPED}:${this.manager.group}:${this.manager.position}`)\n    }\n    sayGonnaStop(){\n        radio.sendString(`${Event.TO_STOP}:${this.manager.group}:${this.manager.position}`)\n    }\n"],[0,"}\n\nc"]],"start1":1161,"start2":1161,"length1":242,"length2":8},{"diffs":[[0,"ext("],[-1,"getCrossRoadPosition(this.positions)));\n        this.show();"],[1,"this.get()));\n        this.show();\n    }\n    get(): CrossRoadPosition {\n        switch (this.position) {\n            case 'A': return CrossRoadPosition.A;\n            case 'B': return CrossRoadPosition.B;\n            case 'C': return CrossRoadPosition.C;\n            case 'D': return CrossRoadPosition.D;\n            default: return CrossRoadPosition.A;\n        }"],[0,"\n   "]],"start1":3232,"start2":3232,"length1":68,"length2":371}]}]},{"timestamp":1735854454636,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"top\n"],[-1,"            return this.transmit.sayStopped()            \n        }\n        this.transmit.sayGonnaStop();\n        this.launchStop();\n    }\n    launchStop(){"],[0,"\n   "]],"start1":1444,"start2":1444,"length1":164,"length2":8},{"diffs":[[0,"        "],[1,"}"],[0,"\n    }\n}"]],"start1":1449,"start2":1449,"length1":16,"length2":17}]}]},{"timestamp":1735855042894,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"   }"],[-1,"\n    stop(){\n        if (this.state === Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        this.state = Kitronik_STOPbit.LightStates.GetReady;\n        this.show();\n        basic.pause(1000)\n        this.state = Kitronik_STOPbit.LightStates.Stop;\n        this.show();\n    }"],[0,"\n\n}\n"]],"start1":242,"start2":242,"length1":303,"length2":8},{"diffs":[[0,"ver\n"],[-1,"    light:Light\n"],[0,"    "]],"start1":725,"start2":725,"length1":24,"length2":8},{"diffs":[[0,"s);\n"],[-1,"        this.light = new Light();\n"],[0,"    "]],"start1":1011,"start2":1011,"length1":42,"length2":8},{"diffs":[[0,"    "],[-1,"this.light.stop();\n        this.transmit.sayStopped();"],[0,"\n   "]],"start1":1609,"start2":1609,"length1":62,"length2":8},{"diffs":[[0,"ESS:"],[-1,"this.manager.receiveAskAccess(getCrossRoadPosition(position));"],[0,"brea"]],"start1":2697,"start2":2697,"length1":70,"length2":8},{"diffs":[[0,"osition());\n"],[-1,""],[0,"        inpu"]],"start1":4147,"start2":4147,"length1":24,"length2":24},{"diffs":[[0,"position"],[1,"s"],[0,")));\n   "]],"start1":4236,"start2":4236,"length1":16,"length2":17}]}]},{"timestamp":1735855641579,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," group, "],[-1,"getCrossRoadPosition("],[0,"position"]],"start1":2854,"start2":2854,"length1":37,"length2":16},{"diffs":[[0,"osition)"],[-1,")"],[0,"\n       "]],"start1":2863,"start2":2863,"length1":17,"length2":16},{"diffs":[[0,"osition:"],[-1,"CrossRoadPosition"],[1,"string"],[0,"){\n     "]],"start1":2932,"start2":2932,"length1":33,"length2":22},{"diffs":[[0,"eceiveAskAccess("],[1,"getCrossRoadPosition("],[0,"position);break;"]],"start1":3114,"start2":3114,"length1":32,"length2":53},{"diffs":[[0,"osition)"],[1,")"],[0,";break;\n"]],"start1":3152,"start2":3152,"length1":16,"length2":17}]}]},{"timestamp":1735855656878,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,";break;\n"],[-1,"            \n"],[0,"        "]],"start1":3172,"start2":3172,"length1":29,"length2":16}]}]},{"timestamp":1735857022865,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"case "],[0,"\n       "]],"start1":3184,"start2":3184,"length1":21,"length2":16}]}]},{"timestamp":1735857024827,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e);\n"],[-1,"        switch(this.state){\n            case Kitronik_STOPbit.LightStates.Go:basic.shobreak;\n            case Kitronik_STOPbit.LightStates.Stop: break;\n            case Kitronik_STOPbit.LightStates.ReadyToStop: break;\n        }\n    }\n    start(){\n        this.state = Kitronik_STOPbit.LightStates.Go;\n        this.show();\n"],[0,"    }\n"],[1,""],[0,"    "]],"start1":237,"start2":237,"length1":336,"length2":14},{"diffs":[[0,"  }\n"],[-1,"    canPass(){\n        if(this.state !== Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        this.light.start();\n    }\n"],[0,"    "]],"start1":1579,"start2":1579,"length1":149,"length2":8},{"diffs":[[0,"osition);break;\n"],[1,""],[0,"            case"]],"start1":3164,"start2":3164,"length1":32,"length2":32},{"diffs":[[0,"ase "],[-1,"Event.TO_STOP:break;\n            case Event.STOPPED:this.manager.canPass();break;"],[0,"\n   "]],"start1":3193,"start2":3193,"length1":89,"length2":8}]}]},{"timestamp":1735857624685,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,".sho"],[-1,"wArrow(3);"],[0,"brea"]],"start1":323,"start2":323,"length1":18,"length2":8},{"diffs":[[0,"op: "],[-1,"basic.showIcon(IconNames.Square);"],[0,"brea"]],"start1":382,"start2":382,"length1":41,"length2":8},{"diffs":[[0,"top:"],[-1," basic.showIcon(IconNames.Chessboard);"],[0," bre"]],"start1":447,"start2":447,"length1":46,"length2":8},{"diffs":[[0,"s.show();\n    }\n"],[1,"\n"],[0,"}\n\nenum CrossRoa"]],"start1":848,"start2":848,"length1":32,"length2":33},{"diffs":[[0,"cess())\n"],[1,"        basic.showIcon(IconNames.Tortoise)\n"],[0,"    }\n  "]],"start1":1735,"start2":1735,"length1":16,"length2":59},{"diffs":[[0,"  }\n"],[-1,"        this.transmit.askAccess()\n"],[0,"    "]],"start1":1895,"start2":1895,"length1":42,"length2":8}]}]},{"timestamp":1735858169147,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"owArrow("],[1,"3"],[0,");break;"]],"start1":326,"start2":326,"length1":16,"length2":17}]}]},{"timestamp":1735859130697,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"basic.showArrow("],[-1,"2"],[0,");break;\n       "]],"start1":318,"start2":318,"length1":33,"length2":32}]}]},{"timestamp":1735859131949,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"())\n"],[-1,"        this.transmit.hello();\n"],[0,"    "]],"start1":1819,"start2":1819,"length1":39,"length2":8},{"diffs":[[0,"t {\n"],[-1,"    HELLO = 0,\n"],[0,"    "]],"start1":2565,"start2":2565,"length1":23,"length2":8},{"diffs":[[0,"    "],[-1,"send(event:Event) "],[1,"askAccess()"],[0,"{\n  "]],"start1":2720,"start2":2720,"length1":26,"length2":19},{"diffs":[[0,"ring(`${"],[-1,"e"],[1,"E"],[0,"vent"],[1,".ASK_ACCESS"],[0,"}:${this"]],"start1":2757,"start2":2757,"length1":21,"length2":32},{"diffs":[[0,")\n    }\n    "],[-1,"askAccess"],[1,"sayStopped"],[0,"(){\n        "]],"start1":2830,"start2":2830,"length1":33,"length2":34},{"diffs":[[0,"    "],[-1,"this.send(Event.ASK_ACCESS);\n    }\n    sayStopped(){\n        this.send(Event.STOPPED);\n    }\n    sayGonnaStop(){\n        this.send(Event.TO_STOP);\n    }\n    hello(){\n        this.send(Event.HELLO);"],[1,"radio.sendString(`${Event.STOPPED}:${this.manager.group}:${this.manager.position}`)\n    }\n    sayGonnaStop(){\n        radio.sendString(`${Event.TO_STOP}:${this.manager.group}:${this.manager.position}`)"],[0,"\n   "]],"start1":2860,"start2":2860,"length1":205,"length2":209}]}]},{"timestamp":1735859539455,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"sage=>{\n"],[-1,"            \n"],[0,"        "]],"start1":3217,"start2":3217,"length1":29,"length2":16}]}]},{"timestamp":1735860713066,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"console.log(\"\")"],[0,"\n   "]],"start1":3233,"start2":3233,"length1":23,"length2":8}]}]},{"timestamp":1735860715529,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"n {A"],[-1," = 'A', B = 'B', C = ''"],[1,", B, C"],[0,", D}"]],"start1":1005,"start2":1005,"length1":31,"length2":14},{"diffs":[[0,"tion"],[-1,".toString()"],[0,"}`)\n"]],"start1":2866,"start2":2866,"length1":19,"length2":8},{"diffs":[[0,"log("],[-1,"`Received ${message}`"],[1,"\"\""],[0,")\n  "]],"start1":3245,"start2":3245,"length1":29,"length2":10}]}]},{"timestamp":1735861314895,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"n {A"],[-1,", B, C"],[1," = 'A', B = 'B', C = ''"],[0,", D}"]],"start1":1005,"start2":1005,"length1":14,"length2":31}]}]},{"timestamp":1735861332329,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"case 'A'"],[-1,","],[0,": return"]],"start1":1120,"start2":1120,"length1":17,"length2":16}]}]},{"timestamp":1735861980581,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"'A',"],[-1,"\"\""],[0,": re"]],"start1":1125,"start2":1125,"length1":10,"length2":8}]}]},{"timestamp":1735861981297,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"'A',"],[-1,"'0'"],[1,"\"\""],[0,": re"]],"start1":1125,"start2":1125,"length1":11,"length2":10},{"diffs":[[0," 'B'"],[-1,",'1'"],[0,": re"]],"start1":1173,"start2":1173,"length1":12,"length2":8},{"diffs":[[0," 'C'"],[-1,",'2'"],[0,": re"]],"start1":1219,"start2":1219,"length1":12,"length2":8},{"diffs":[[0," 'D'"],[-1,",'3'"],[0,": re"]],"start1":1265,"start2":1265,"length1":12,"length2":8}]}]},{"timestamp":1735861999638,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"position"],[1,".toString()"],[0,"}`)\n    "]],"start1":2878,"start2":2878,"length1":16,"length2":27}]}]},{"timestamp":1735863146863,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"();\n"],[-1,"        console.log()\n"],[0,"    "]],"start1":1866,"start2":1866,"length1":30,"length2":8}]}]},{"timestamp":1735863201624,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"case 'A'"],[-1,":\n        case "],[1,","],[0,"'0': ret"]],"start1":1120,"start2":1120,"length1":31,"length2":17},{"diffs":[[0,"case 'B'"],[-1,":\n        case "],[1,","],[0,"'1': ret"]],"start1":1170,"start2":1170,"length1":31,"length2":17},{"diffs":[[0,"case 'C'"],[-1,":\n        case "],[1,","],[0,"'2': ret"]],"start1":1220,"start2":1220,"length1":31,"length2":17},{"diffs":[[0," 'D'"],[-1,":\n        case "],[1,","],[0,"'3':"]],"start1":1274,"start2":1274,"length1":23,"length2":9},{"diffs":[[0,"it.hello();\n"],[1,"        console.log()\n"],[0,"    }\n    as"]],"start1":1858,"start2":1858,"length1":24,"length2":46}]}]},{"timestamp":1735863753738,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ructor(p"],[-1,"ublic"],[1,"rivate"],[0," state:K"]],"start1":58,"start2":58,"length1":21,"length2":22},{"diffs":[[0,"tStates."],[-1,"Get"],[0,"Ready"],[1,"ToStop"],[0,": basic."]],"start1":474,"start2":474,"length1":24,"length2":27},{"diffs":[[0,"        if(this."],[-1,"light."],[0,"state === Kitron"]],"start1":1949,"start2":1949,"length1":38,"length2":32},{"diffs":[[0,"es.Go){\n"],[1,""],[0,"        "]],"start1":2001,"start2":2001,"length1":16,"length2":16},{"diffs":[[0,"    if(this."],[-1,"light."],[0,"state !== Ki"]],"start1":2098,"start2":2098,"length1":30,"length2":24},{"diffs":[[0,"      }\n"],[-1,"        \n"],[0,"        "]],"start1":2178,"start2":2178,"length1":25,"length2":16},{"diffs":[[0,"turn;\n        }\n"],[1,""],[0,"        if(this."]],"start1":2324,"start2":2324,"length1":32,"length2":32},{"diffs":[[0,"if(this."],[-1,"light."],[0,"state =="]],"start1":2348,"start2":2348,"length1":22,"length2":16}]}]},{"timestamp":1735864003832,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"stop();\n"],[-1,"        \n"],[0,"        "]],"start1":2629,"start2":2629,"length1":25,"length2":16}]}]},{"timestamp":1735920763384,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"pau"],[0,"\n       "]],"start1":2637,"start2":2637,"length1":19,"length2":16}]}]},{"timestamp":1735920764649,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," pau"],[-1,"se(1000);"],[0,"\n   "]],"start1":2644,"start2":2644,"length1":17,"length2":8}]}]},{"timestamp":1735920771354,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"t:Light\n"],[-1,"    \n"],[0,"    stat"]],"start1":1502,"start2":1502,"length1":21,"length2":16}]}]},{"timestamp":1735939799419,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"id:"],[0,"\n   "]],"start1":1510,"start2":1510,"length1":11,"length2":8}]}]},{"timestamp":1735939800473,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n    id:"],[-1,"number"],[0,"\n    sta"]],"start1":1509,"start2":1509,"length1":22,"length2":16},{"diffs":[[0,"();\n"],[-1,"        this.id = randint(0,1000)\n"],[0,"    "]],"start1":1834,"start2":1834,"length1":42,"length2":8},{"diffs":[[0,"kAccess("],[-1,"id:number, "],[0,"position"]],"start1":2258,"start2":2258,"length1":27,"length2":16},{"diffs":[[0,"     if("],[-1,"id"],[1,"position"],[0," === thi"]],"start1":2298,"start2":2298,"length1":18,"length2":24},{"diffs":[[0,"== this."],[-1,"id"],[1,"position"],[0,"){\n     "]],"start1":2316,"start2":2316,"length1":18,"length2":24},{"diffs":[[0,"ger."],[-1,"id}:${this.manager."],[0,"grou"]],"start1":2960,"start2":2960,"length1":27,"length2":8},{"diffs":[[0,"]);\n"],[-1,"            const id = parseInt(message.split(\":\")[1]);\n"],[0,"    "]],"start1":3451,"start2":3451,"length1":64,"length2":8},{"diffs":[[0,"it(\":\")["],[-1,"2"],[1,"1"],[0,"]);\n    "]],"start1":3501,"start2":3501,"length1":17,"length2":17},{"diffs":[[0,"it(\":\")["],[-1,"3"],[1,"2"],[0,"];\n     "]],"start1":3554,"start2":3554,"length1":17,"length2":17},{"diffs":[[0,"ent,"],[-1," id,"],[0," gro"]],"start1":3592,"start2":3592,"length1":12,"length2":8},{"diffs":[[0,"ber,"],[-1," id:number,"],[0," gro"]],"start1":3676,"start2":3676,"length1":19,"length2":8},{"diffs":[[0,"kAccess("],[-1,"id, "],[0,"position"]],"start1":3897,"start2":3897,"length1":20,"length2":16}]}]},{"timestamp":1735940349250,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"turn;\n        }\n"],[1,"        \n"],[0,"        this.lig"]],"start1":2226,"start2":2226,"length1":32,"length2":41},{"diffs":[[0,"     if("],[-1,"position"],[1,"id"],[0," === thi"]],"start1":2349,"start2":2349,"length1":24,"length2":18},{"diffs":[[0,"== this."],[-1,"position"],[1,"id"],[0,"){\n     "]],"start1":2361,"start2":2361,"length1":24,"length2":18}]}]},{"timestamp":1735940887642,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n"],[-1,"    notifyHello(id:number, position:CrossRoadPosition){\n        \n    }\n"],[0,"    "]],"start1":2125,"start2":2125,"length1":79,"length2":8},{"diffs":[[0,"ak;\n"],[-1,"            case Event.HELLO:this.manager.notifyHello(id, position);break;\n"],[0,"    "]],"start1":4153,"start2":4153,"length1":83,"length2":8}]}]},{"timestamp":1735940996756,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"tton"],[-1,"// Stor"],[0,".A,("]],"start1":1910,"start2":1910,"length1":15,"length2":8},{"diffs":[[0,"ition){\n"],[1,"        "],[0,"\n    }\n "]],"start1":2177,"start2":2177,"length1":16,"length2":24}]}]},{"timestamp":1735941595824,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"class Fire{\n    constructor(private id:number,private position:CrossRoadPosition){}\n    equals(f:Fire):boolean{\n        return f.id === this.id;\n    }\n}\n\n"],[0,"clas"]],"start1":1414,"start2":1414,"length1":162,"length2":8},{"diffs":[[0,"ghtManager{\n"],[1,""],[0,"    transmit"]],"start1":1426,"start2":1426,"length1":24,"length2":24},{"diffs":[[0,"ber\n"],[-1,"    fires:Fire[]\n"],[0,"    "]],"start1":1520,"start2":1520,"length1":25,"length2":8},{"diffs":[[0,"d(Button"],[1,"// Stor"],[0,".A,()=>t"]],"start1":1906,"start2":1906,"length1":16,"length2":23},{"diffs":[[0,"n){\n"],[-1,"        // store every player id with position\n        if(!this.fires.some(f=>f.equals(new Fire(id, position)))){\n            this.fires.push(new Fire(id, position))\n        }"],[0,"\n   "]],"start1":2188,"start2":2188,"length1":183,"length2":8}]}]},{"timestamp":1735941772342,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"n))\n"],[-1,"            //S\n"],[0,"    "]],"start1":2518,"start2":2518,"length1":24,"length2":8}]}]},{"timestamp":1735943839244,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"      //"],[1,"S"],[0,"\n       "]],"start1":2528,"start2":2528,"length1":16,"length2":17}]}]},{"timestamp":1735943839621,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"se(1"],[-1,"5"],[1,"0"],[0,"00)\n"]],"start1":849,"start2":849,"length1":9,"length2":9},{"diffs":[[0,"re[]"],[-1," = []"],[0,"\n   "]],"start1":1690,"start2":1690,"length1":13,"length2":8},{"diffs":[[0,"  //"],[-1," Say hello again\n            this.transmit.hello()"],[0,"\n   "]],"start1":2532,"start2":2532,"length1":58,"length2":8},{"diffs":[[0,"        return;\n"],[1,""],[0,"        }\n      "]],"start1":2640,"start2":2640,"length1":32,"length2":32},{"diffs":[[0,"  }\n"],[-1,"        // Check if enough answer is received\n"],[0,"    "]],"start1":2662,"start2":2662,"length1":54,"length2":8}]}]},{"timestamp":1735944021258,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"er){"],[-1,"\n        \n    "],[0,"}\n  "]],"start1":3451,"start2":3451,"length1":22,"length2":8}]}]},{"timestamp":1736024480212,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"raio."],[0,"\n   "]],"start1":3460,"start2":3460,"length1":13,"length2":8}]}]},{"timestamp":1736024481431,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"o()\n"],[-1,"            basic.showNumber(this.fires.length)\n"],[0,"    "]],"start1":2588,"start2":2588,"length1":56,"length2":8},{"diffs":[[0,"  ra"],[-1,"d"],[0,"io."],[-1,"setGroup(manager.group)\n        radio.setFrequencyBand(manager.group)"],[0,"\n   "]],"start1":3462,"start2":3462,"length1":81,"length2":11}]}]},{"timestamp":1736024674263,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," []\n"],[-1,"    waitAccess:boolean = false\n"],[0,"    "]],"start1":1696,"start2":1696,"length1":39,"length2":8},{"diffs":[[0,"  }\n"],[-1,"        this.waitAccess = true;\n"],[0,"    "]],"start1":2261,"start2":2261,"length1":40,"length2":8}]}]},{"timestamp":1736025211197,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"      }\n"],[-1,"        \n"],[0,"        "]],"start1":2824,"start2":2824,"length1":25,"length2":16}]}]},{"timestamp":1736026302935,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"if"],[0,"\n       "]],"start1":2832,"start2":2832,"length1":18,"length2":16}]}]},{"timestamp":1736026303678,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  if"],[-1,"(!this.waitAccess){\n            return;\n        }\n        this.waitAccess = false;"],[0,"\n   "]],"start1":2838,"start2":2838,"length1":90,"length2":8}]}]},{"timestamp":1736026316386,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"Stop"],[-1," || "],[0,"){\n "]],"start1":2795,"start2":2795,"length1":12,"length2":8}]}]},{"timestamp":1736029854476,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"Stop || "],[-1,"!"],[0,"){\n     "]],"start1":2795,"start2":2795,"length1":17,"length2":16}]}]},{"timestamp":1736029854963,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"|| !"],[-1,"this.waitAccess"],[0,"){\n"],[1,""],[0,"    "]],"start1":2800,"start2":2800,"length1":26,"length2":11},{"diffs":[[0,"      }\n        "],[1,"if(!this.waitAccess){\n            return;\n        }\n        this.waitAccess = false;"],[0,"\n        // Chec"]],"start1":2829,"start2":2829,"length1":32,"length2":116},{"diffs":[[0,"ived"],[-1,"\n        this.waitAccess = false;"],[0,"\n   "]],"start1":2971,"start2":2971,"length1":41,"length2":8}]}]},{"timestamp":1736029869541,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]}]},{"timestamp":1736197231864,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":325,"start2":325,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// les tests vont ici ; cela ne sera pas compilé si ce paquet est utilisé en tant qu'extension.\n"}]}],"snapshots":[{"timestamp":1735600645042,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Smart city traffic light\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1735602483000,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n\n\nclass Light {\n    constructor(private state:Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop){\n        this.stop();\n    }\n    stop(){\n        Kitronik_STOPbit.trafficLightLED()\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"Smart city traffic light\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-kitronik-stopbit\": \"github:kitronikltd/pxt-kitronik-stopbit#v1.1.2\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1735771076636,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n\n\nclass Light {\n    constructor(private state:Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop){\n        this.show();\n    }\n    show(){\n        Kitronik_STOPbit.trafficLightState(this.state);\n    }\n\n}\n\nenum CrossRoadKind {Line, Cross, T}\nenum CrossRoadPosition {A, B, C}\n\nclass LightManager{\n    transmit: RadioTransmit\n    receiver: RadioReceiver\n    constructor(private group: number, private crossRoadKind: CrossRoadKind, private position: CrossRoadPosition){\n        this.transmit = new RadioTransmit(this);\n        this.receiver = new RadioReceiver(this);\n    }\n}\n\n// Send messages to all\nclass RadioTransmit{\n    constructor(private manager: LightManager){}\n}\n\nclass RadioReceiver{\n    constructor(private manager: LightManager) { \n        radio.onReceivedBuffer(buffer=>{\n            buffer.toString()\n        })\n        \n    }\n}\n\n\n/* Configuration */\nclass Configuration{\n    constructor(private group: number, private crossRoadKind: CrossRoadKind, private position: CrossRoadPosition){\n        new GroupConfig((group:number)=>this.showCrossroadTypeConfig(group));\n    }\n    showCrossroadTypeConfig(group:number){\n        this.group = group;\n        new KindConfig((kind: CrossRoadKind)=>this.showCrossroadPosition(kind));\n    }\n    showCrossroadPosition(kind: CrossRoadKind){\n        this.crossRoadKind = kind;\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass GroupConfig {\n    constructor(next:(group:number)=>void,private group:number = 0){\n        input.onButtonPressed(Button.A, () => this.increaseGroupNumber());\n        input.onButtonPressed(Button.B, ()=>next(this.group));\n        this.show();\n    }\n    increaseGroupNumber(){\n        this.group = (this.group + 1)%10;\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.group)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass PositionConfig {\n    constructor(next: (position: string) => void, private position: string = \"A\") {\n        input.onButtonPressed(Button.A, () => this.increasePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    increasePosition() {\n        this.position = this.position.charAt(0) + 1;\n        //this.position = (this.group + 1) % 10;\n        this.show();\n    }\n    show() {\n        basic.showString(this.position)\n    }\n}\n\nclass KindConfig {\n    constructor(next: (kind:CrossRoadKind) => void, private kind: CrossRoadKind = CrossRoadKind.Line) {\n        input.onButtonPressed(Button.A, () => this.increaseType());\n        input.onButtonPressed(Button.B, () => next(this.kind));\n        this.show();\n    }\n    increaseType(){\n        switch (this.kind) {\n            case CrossRoadKind.Line: this.kind = CrossRoadKind.Cross;break;\n            case CrossRoadKind.Cross: this.kind = CrossRoadKind.T; break;\n            case CrossRoadKind.T: this.kind = CrossRoadKind.Line;break;\n        }\n        this.show();\n    }\n    show(){\n        switch(this.kind){\n            case CrossRoadKind.Line:basic.showArrow(2);break;\n            case CrossRoadKind.Cross: basic.showIcon(3);break;\n            case CrossRoadKind.T: basic.showString(\"T\");break;\n        }\n    }\n}\n//new Configuration();\nlet val = \"A\";\nval = val.charAt(0) + 1;\nconsole.log(val)","README.md":"","pxt.json":"{\n    \"name\": \"Smart city traffic light\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-kitronik-stopbit\": \"github:kitronikltd/pxt-kitronik-stopbit#v1.1.2\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1735861306199,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n\n\nclass Light {\n    constructor(private state:Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop){\n        this.show();\n    }\n    show(){\n        Kitronik_STOPbit.trafficLightState(this.state);\n        switch(this.state){\n            case Kitronik_STOPbit.LightStates.Go:basic.showArrow(2);break;\n            case Kitronik_STOPbit.LightStates.Stop: basic.showIcon(IconNames.Square);break;\n            case Kitronik_STOPbit.LightStates.ReadyToStop: basic.showIcon(IconNames.Chessboard); break;\n        }\n    }\n    start(){\n        this.state = Kitronik_STOPbit.LightStates.Go;\n        this.show();\n    }\n    stop(){\n        if (this.state === Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        this.state = Kitronik_STOPbit.LightStates.GetReady;\n        this.show();\n        basic.pause(1000)\n        this.state = Kitronik_STOPbit.LightStates.Stop;\n        this.show();\n    }\n}\n\nenum CrossRoadKind {Line, Cross, T}\nenum CrossRoadPosition {A, B, C, D}\n\nfunction getCrossRoadPosition(position:string):CrossRoadPosition {\n    switch (position) {\n        case 'A': return CrossRoadPosition.A;\n        case 'B': return CrossRoadPosition.B;\n        case 'C': return CrossRoadPosition.C;\n        case 'D': return CrossRoadPosition.D;\n        default: return CrossRoadPosition.A;\n    }\n}\n\nclass LightManager{\n    transmit: RadioTransmit\n    receiver: RadioReceiver\n    light:Light\n    state: Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop\n    constructor(public group: number, public crossRoadKind: CrossRoadKind, public position: CrossRoadPosition){\n        this.transmit = new RadioTransmit(this);\n        this.receiver = new RadioReceiver(this);\n        this.light = new Light();\n        input.onButtonPressed(Button.A,()=>this.askAccess())\n        this.transmit.hello();\n    }\n    askAccess(){\n        if(this.state === Kitronik_STOPbit.LightStates.Go){\n            return;\n        }\n        this.transmit.askAccess()\n    }\n    canPass(){\n        if(this.state !== Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        this.light.start();\n    }\n    receiveAskAccess(position:CrossRoadPosition){\n        if(position === this.position){\n            return;\n        }\n        if(this.state === Kitronik_STOPbit.LightStates.Stop){\n            // Already stop\n            return this.transmit.sayStopped()            \n        }\n        this.transmit.sayGonnaStop();\n        this.launchStop();\n    }\n    launchStop(){\n        this.light.stop();\n        this.transmit.sayStopped();\n    }\n}\n\nenum Event {\n    HELLO = 0,\n    ASK_ACCESS = 1,\n    STOPPED = 2,\n    TO_STOP = 3\n\n}\n\n// Send messages to all\nclass RadioTransmit{\n    constructor(private manager: LightManager){}\n    send(event:Event) {\n        radio.sendString(`${event}:${this.manager.group}:${this.manager.position.toString()}`)\n    }\n    askAccess(){\n        this.send(Event.ASK_ACCESS);\n    }\n    sayStopped(){\n        this.send(Event.STOPPED);\n    }\n    sayGonnaStop(){\n        this.send(Event.TO_STOP);\n    }\n    hello(){\n        this.send(Event.HELLO);\n    }\n}\n\nclass RadioReceiver{\n    constructor(private manager: LightManager) { \n        radio.onReceivedString(message=>{\n            console.log(`Received ${message}`)\n            const event = parseInt(message.split(\":\")[0]);\n            const group = parseInt(message.split(\":\")[1]);\n            const position = message.split(\":\")[2];\n            this.manage(event, group, getCrossRoadPosition(position))\n        })   \n    }\n    manage(event:number, group:number, position:CrossRoadPosition){\n        if(group !== this.manager.group){\n            return; // Ignore other group\n        }\n        switch(event){\n            case Event.ASK_ACCESS:this.manager.receiveAskAccess(position);break;\n            case Event.TO_STOP:break;\n            case Event.STOPPED:this.manager.canPass();break;\n        }\n    }\n}\n\n/* Configuration */\nclass Configuration{\n    constructor(private group: number = 0, private crossRoadKind: CrossRoadKind = CrossRoadKind.Line){\n        new GroupConfig((group:number)=>this.showCrossroadTypeConfig(group));\n    }\n    showCrossroadTypeConfig(group:number){\n        this.group = group;\n        new KindConfig((kind: CrossRoadKind)=>this.showCrossroadPosition(kind));\n    }\n    showCrossroadPosition(kind: CrossRoadKind){\n        this.crossRoadKind = kind;\n        new PositionConfig((position: CrossRoadPosition) => this.complete(position),'A')\n    }\n    complete(position: CrossRoadPosition){\n        new LightManager(this.group, this.crossRoadKind, position)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass GroupConfig {\n    constructor(next:(group:number)=>void,private group:number = 0){\n        input.onButtonPressed(Button.A, () => this.increaseGroupNumber());\n        input.onButtonPressed(Button.B, ()=>next(this.group));\n        this.show();\n    }\n    increaseGroupNumber(){\n        this.group = (this.group + 1)%10;\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.group)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass PositionConfig {\n    positions:string[] = ['A','B','C','D']\n    constructor(next: (position: CrossRoadPosition) => void, private position: string) {\n        input.onButtonPressed(Button.A, () => this.increasePosition());\n        input.onButtonPressed(Button.B, () => next(getCrossRoadPosition(this.position)));\n        this.show();\n    }\n    increasePosition() {\n        const pos = this.positions.indexOf(this.position);\n        this.position = this.positions[(pos+1)%4];\n        this.show();\n    }\n    show() {\n        basic.showString(this.position)\n    }\n}\n\nclass KindConfig {\n    constructor(next: (kind:CrossRoadKind) => void, private kind: CrossRoadKind = CrossRoadKind.Line) {\n        input.onButtonPressed(Button.A, () => this.increaseType());\n        input.onButtonPressed(Button.B, () => next(this.kind));\n        this.show();\n    }\n    increaseType(){\n        switch (this.kind) {\n            case CrossRoadKind.Line: this.kind = CrossRoadKind.Cross;break;\n            case CrossRoadKind.Cross: this.kind = CrossRoadKind.T; break;\n            case CrossRoadKind.T: this.kind = CrossRoadKind.Line;break;\n        }\n        this.show();\n    }\n    show(){\n        switch(this.kind){\n            case CrossRoadKind.Line:basic.showArrow(2);break;\n            case CrossRoadKind.Cross: basic.showIcon(3);break;\n            case CrossRoadKind.T: basic.showString(\"T\");break;\n        }\n    }\n}\nnew Configuration();\n","README.md":"","pxt.json":"{\n    \"name\": \"Smart city traffic light\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-kitronik-stopbit\": \"github:kitronikltd/pxt-kitronik-stopbit#v1.1.2\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1735943839244,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n\n\nclass Light {\n    constructor(public state:Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop){\n        this.show();\n    }\n    show(){\n        Kitronik_STOPbit.trafficLightState(this.state);\n        switch(this.state){\n            case Kitronik_STOPbit.LightStates.Go:basic.showArrow(2);break;\n            case Kitronik_STOPbit.LightStates.Stop: basic.showIcon(IconNames.Square);break;\n            case Kitronik_STOPbit.LightStates.GetReady: basic.showIcon(IconNames.Chessboard); break;\n        }\n    }\n    start(){\n        this.state = Kitronik_STOPbit.LightStates.Go;\n        this.show();\n    }\n    stop(){\n        if (this.state === Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        this.state = Kitronik_STOPbit.LightStates.GetReady;\n        this.show();\n        basic.pause(1000)\n        this.state = Kitronik_STOPbit.LightStates.Stop;\n        this.show();\n    }\n}\n\nenum CrossRoadKind {Line, Cross, T}\nenum CrossRoadPosition {A, B, C, D}\n\nfunction getCrossRoadPosition(position:string):CrossRoadPosition {\n    switch (position) {\n        case 'A':\n        case '0': return CrossRoadPosition.A;\n        case 'B':\n        case '1': return CrossRoadPosition.B;\n        case 'C':\n        case '2': return CrossRoadPosition.C;\n        case 'D':\n        case '3': return CrossRoadPosition.D;\n        default: return CrossRoadPosition.A;\n    }\n}\n\nclass Fire{\n    constructor(private id:number,private position:CrossRoadPosition){}\n    equals(f:Fire):boolean{\n        return f.id === this.id;\n    }\n}\n\nclass LightManager{\n    transmit: RadioTransmit\n    receiver: RadioReceiver\n    light:Light\n    id:number\n    fires:Fire[]\n    state: Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop\n    constructor(public group: number, public crossRoadKind: CrossRoadKind, public position: CrossRoadPosition){\n        this.transmit = new RadioTransmit(this);\n        this.receiver = new RadioReceiver(this);\n        this.light = new Light();\n        this.id = randint(0,1000)\n        input.onButtonPressed(Button.A,()=>this.askAccess())\n        this.transmit.hello();\n    }\n    askAccess(){\n        if(this.light.state === Kitronik_STOPbit.LightStates.Go){\n            return;\n        }\n        this.transmit.askAccess()\n    }\n    notifyHello(id:number, position:CrossRoadPosition){\n        // store every player id with position\n        if(!this.fires.some(f=>f.equals(new Fire(id, position)))){\n            this.fires.push(new Fire(id, position))\n        }\n    }\n    canPass(){\n        if(this.light.state !== Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        this.light.start();\n    }\n    receiveAskAccess(id:number, position:CrossRoadPosition){\n        if(position === this.position){\n            return;\n        }\n        if(this.light.state === Kitronik_STOPbit.LightStates.Stop){\n            // Already stop\n            return this.transmit.sayStopped()            \n        }\n        this.transmit.sayGonnaStop();\n        this.launchStop();\n    }\n    launchStop(){\n        this.light.stop();\n        pause(1000);\n        this.transmit.sayStopped();\n    }\n}\n\nenum Event {\n    HELLO = 0,\n    ASK_ACCESS = 1,\n    STOPPED = 2,\n    TO_STOP = 3\n\n}\n\n// Send messages to all\nclass RadioTransmit{\n    constructor(private manager: LightManager){}\n    send(event:Event) {\n        radio.sendString(`${event}:${this.manager.id}:${this.manager.group}:${this.manager.position}`)\n    }\n    askAccess(){\n        this.send(Event.ASK_ACCESS);\n    }\n    sayStopped(){\n        this.send(Event.STOPPED);\n    }\n    sayGonnaStop(){\n        this.send(Event.TO_STOP);\n    }\n    hello(){\n        this.send(Event.HELLO);\n    }\n}\n\nclass RadioReceiver{\n    constructor(private manager: LightManager) { \n        radio.onReceivedString(message=>{\n            console.log(`Received ${message}`)\n            const event = parseInt(message.split(\":\")[0]);\n            const id = parseInt(message.split(\":\")[1]);\n            const group = parseInt(message.split(\":\")[2]);\n            const position = message.split(\":\")[3];\n            this.manage(event, id, group, getCrossRoadPosition(position))\n        })   \n    }\n    manage(event:number, id:number, group:number, position:CrossRoadPosition){\n        if(group !== this.manager.group){\n            return; // Ignore other group\n        }\n        switch(event){\n            case Event.ASK_ACCESS:this.manager.receiveAskAccess(id, position);break;\n            case Event.TO_STOP:break;\n            case Event.STOPPED:this.manager.canPass();break;\n            case Event.HELLO:this.manager.notifyHello(id, position);break;\n        }\n    }\n}\n\n/* Configuration */\nclass Configuration{\n    constructor(private group: number = 0, private crossRoadKind: CrossRoadKind = CrossRoadKind.Line){\n        new GroupConfig((group:number)=>this.showCrossroadTypeConfig(group));\n    }\n    showCrossroadTypeConfig(group:number){\n        this.group = group;\n        new KindConfig((kind: CrossRoadKind)=>this.showCrossroadPosition(kind));\n    }\n    showCrossroadPosition(kind: CrossRoadKind){\n        this.crossRoadKind = kind;\n        new PositionConfig((position: CrossRoadPosition) => this.complete(position),'A')\n    }\n    complete(position: CrossRoadPosition){\n        new LightManager(this.group, this.crossRoadKind, position)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass GroupConfig {\n    constructor(next:(group:number)=>void,private group:number = 0){\n        input.onButtonPressed(Button.A, () => this.increaseGroupNumber());\n        input.onButtonPressed(Button.B, ()=>next(this.group));\n        this.show();\n    }\n    increaseGroupNumber(){\n        this.group = (this.group + 1)%10;\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.group)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass PositionConfig {\n    positions:string[] = ['A','B','C','D']\n    constructor(next: (position: CrossRoadPosition) => void, private position: string) {\n        input.onButtonPressed(Button.A, () => this.increasePosition());\n        input.onButtonPressed(Button.B, () => next(getCrossRoadPosition(this.position)));\n        this.show();\n    }\n    increasePosition() {\n        const pos = this.positions.indexOf(this.position);\n        this.position = this.positions[(pos+1)%4];\n        this.show();\n    }\n    show() {\n        basic.showString(this.position)\n    }\n}\n\nclass KindConfig {\n    constructor(next: (kind:CrossRoadKind) => void, private kind: CrossRoadKind = CrossRoadKind.Line) {\n        input.onButtonPressed(Button.A, () => this.increaseType());\n        input.onButtonPressed(Button.B, () => next(this.kind));\n        this.show();\n    }\n    increaseType(){\n        switch (this.kind) {\n            case CrossRoadKind.Line: this.kind = CrossRoadKind.Cross;break;\n            case CrossRoadKind.Cross: this.kind = CrossRoadKind.T; break;\n            case CrossRoadKind.T: this.kind = CrossRoadKind.Line;break;\n        }\n        this.show();\n    }\n    show(){\n        switch(this.kind){\n            case CrossRoadKind.Line:basic.showArrow(2);break;\n            case CrossRoadKind.Cross: basic.showIcon(3);break;\n            case CrossRoadKind.T: basic.showString(\"T\");break;\n        }\n    }\n}\nnew Configuration();\n","README.md":"","pxt.json":"{\n    \"name\": \"Smart city traffic light\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-kitronik-stopbit\": \"github:kitronikltd/pxt-kitronik-stopbit#v1.1.2\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1736029854476,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n\n\nclass Light {\n    constructor(public state:Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop){\n        this.show();\n    }\n    show(){\n        Kitronik_STOPbit.trafficLightState(this.state);\n        switch(this.state){\n            case Kitronik_STOPbit.LightStates.Go:basic.showArrow(2);break;\n            case Kitronik_STOPbit.LightStates.Stop: basic.showIcon(IconNames.Square);break;\n            case Kitronik_STOPbit.LightStates.GetReady: basic.showIcon(IconNames.Chessboard); break;\n        }\n    }\n    start(){\n        this.state = Kitronik_STOPbit.LightStates.Go;\n        this.show();\n    }\n    stop(){\n        if (this.state === Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        this.state = Kitronik_STOPbit.LightStates.GetReady;\n        this.show();\n        basic.pause(1500)\n        this.state = Kitronik_STOPbit.LightStates.Stop;\n        this.show();\n    }\n}\n\nenum CrossRoadKind {Line, Cross, T}\nenum CrossRoadPosition {A, B, C, D}\n\nfunction getCrossRoadPosition(position:string):CrossRoadPosition {\n    switch (position) {\n        case 'A':\n        case '0': return CrossRoadPosition.A;\n        case 'B':\n        case '1': return CrossRoadPosition.B;\n        case 'C':\n        case '2': return CrossRoadPosition.C;\n        case 'D':\n        case '3': return CrossRoadPosition.D;\n        default: return CrossRoadPosition.A;\n    }\n}\n\nclass Fire{\n    constructor(private id:number,private position:CrossRoadPosition){}\n    equals(f:Fire):boolean{\n        return f.id === this.id;\n    }\n}\n\nclass LightManager{\n    transmit: RadioTransmit\n    receiver: RadioReceiver\n    light:Light\n    id:number\n    fires:Fire[] = []\n    waitAccess:boolean = false\n    state: Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop\n    constructor(public group: number, public crossRoadKind: CrossRoadKind, public position: CrossRoadPosition){\n        this.transmit = new RadioTransmit(this);\n        this.receiver = new RadioReceiver(this);\n        this.light = new Light();\n        this.id = randint(0,1000)\n        input.onButtonPressed(Button.A,()=>this.askAccess())\n        this.transmit.hello();\n    }\n    askAccess(){\n        if(this.light.state === Kitronik_STOPbit.LightStates.Go){\n            return;\n        }\n        this.waitAccess = true;\n        this.transmit.askAccess()\n    }\n    notifyHello(id:number, position:CrossRoadPosition){\n        // store every player id with position\n        if(!this.fires.some(f=>f.equals(new Fire(id, position)))){\n            this.fires.push(new Fire(id, position))\n            // Say hello again\n            this.transmit.hello()\n            basic.showNumber(this.fires.length)\n        }\n    }\n    canPass(){\n        if(this.light.state !== Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        if(!this.waitAccess){\n            return;\n        }\n        this.waitAccess = false;\n        // Check if enough answer is received\n        this.light.start();\n    }\n    receiveAskAccess(id:number, position:CrossRoadPosition){\n        if(position === this.position){\n            return;\n        }\n        if(this.light.state === Kitronik_STOPbit.LightStates.Stop){\n            // Already stop\n            return this.transmit.sayStopped()            \n        }\n        this.transmit.sayGonnaStop();\n        this.launchStop();\n    }\n    launchStop(){\n        this.light.stop();\n        pause(1000);\n        this.transmit.sayStopped();\n    }\n}\n\nenum Event {\n    HELLO = 0,\n    ASK_ACCESS = 1,\n    STOPPED = 2,\n    TO_STOP = 3\n\n}\n\n// Send messages to all\nclass RadioTransmit{\n    constructor(private manager: LightManager){\n        radio.setGroup(manager.group)\n        radio.setFrequencyBand(manager.group)\n    }\n    send(event:Event) {\n        radio.sendString(`${event}:${this.manager.id}:${this.manager.group}:${this.manager.position}`)\n    }\n    askAccess(){\n        this.send(Event.ASK_ACCESS);\n    }\n    sayStopped(){\n        this.send(Event.STOPPED);\n    }\n    sayGonnaStop(){\n        this.send(Event.TO_STOP);\n    }\n    hello(){\n        this.send(Event.HELLO);\n    }\n}\n\nclass RadioReceiver{\n    constructor(private manager: LightManager) { \n        radio.onReceivedString(message=>{\n            console.log(`Received ${message}`)\n            const event = parseInt(message.split(\":\")[0]);\n            const id = parseInt(message.split(\":\")[1]);\n            const group = parseInt(message.split(\":\")[2]);\n            const position = message.split(\":\")[3];\n            this.manage(event, id, group, getCrossRoadPosition(position))\n        })   \n    }\n    manage(event:number, id:number, group:number, position:CrossRoadPosition){\n        if(group !== this.manager.group){\n            return; // Ignore other group\n        }\n        switch(event){\n            case Event.ASK_ACCESS:this.manager.receiveAskAccess(id, position);break;\n            case Event.TO_STOP:break;\n            case Event.STOPPED:this.manager.canPass();break;\n            case Event.HELLO:this.manager.notifyHello(id, position);break;\n        }\n    }\n}\n\n/* Configuration */\nclass Configuration{\n    constructor(private group: number = 0, private crossRoadKind: CrossRoadKind = CrossRoadKind.Line){\n        new GroupConfig((group:number)=>this.showCrossroadTypeConfig(group));\n    }\n    showCrossroadTypeConfig(group:number){\n        this.group = group;\n        new KindConfig((kind: CrossRoadKind)=>this.showCrossroadPosition(kind));\n    }\n    showCrossroadPosition(kind: CrossRoadKind){\n        this.crossRoadKind = kind;\n        new PositionConfig((position: CrossRoadPosition) => this.complete(position),'A')\n    }\n    complete(position: CrossRoadPosition){\n        new LightManager(this.group, this.crossRoadKind, position)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass GroupConfig {\n    constructor(next:(group:number)=>void,private group:number = 0){\n        input.onButtonPressed(Button.A, () => this.increaseGroupNumber());\n        input.onButtonPressed(Button.B, ()=>next(this.group));\n        this.show();\n    }\n    increaseGroupNumber(){\n        this.group = (this.group + 1)%10;\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.group)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass PositionConfig {\n    positions:string[] = ['A','B','C','D']\n    constructor(next: (position: CrossRoadPosition) => void, private position: string) {\n        input.onButtonPressed(Button.A, () => this.increasePosition());\n        input.onButtonPressed(Button.B, () => next(getCrossRoadPosition(this.position)));\n        this.show();\n    }\n    increasePosition() {\n        const pos = this.positions.indexOf(this.position);\n        this.position = this.positions[(pos+1)%4];\n        this.show();\n    }\n    show() {\n        basic.showString(this.position)\n    }\n}\n\nclass KindConfig {\n    constructor(next: (kind:CrossRoadKind) => void, private kind: CrossRoadKind = CrossRoadKind.Line) {\n        input.onButtonPressed(Button.A, () => this.increaseType());\n        input.onButtonPressed(Button.B, () => next(this.kind));\n        this.show();\n    }\n    increaseType(){\n        switch (this.kind) {\n            case CrossRoadKind.Line: this.kind = CrossRoadKind.Cross;break;\n            case CrossRoadKind.Cross: this.kind = CrossRoadKind.T; break;\n            case CrossRoadKind.T: this.kind = CrossRoadKind.Line;break;\n        }\n        this.show();\n    }\n    show(){\n        switch(this.kind){\n            case CrossRoadKind.Line:basic.showArrow(2);break;\n            case CrossRoadKind.Cross: basic.showIcon(3);break;\n            case CrossRoadKind.T: basic.showString(\"T\");break;\n        }\n    }\n}\nnew Configuration();\n","README.md":"","pxt.json":"{\n    \"name\": \"Smart city traffic light\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-kitronik-stopbit\": \"github:kitronikltd/pxt-kitronik-stopbit#v1.1.2\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1736197231864,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n\n\nclass Light {\n    constructor(public state:Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop){\n        this.show();\n    }\n    show(){\n        Kitronik_STOPbit.trafficLightState(this.state);\n        switch(this.state){\n            case Kitronik_STOPbit.LightStates.Go:basic.showArrow(2);break;\n            case Kitronik_STOPbit.LightStates.Stop: basic.showIcon(IconNames.Square);break;\n            case Kitronik_STOPbit.LightStates.GetReady: basic.showIcon(IconNames.Chessboard); break;\n        }\n    }\n    start(){\n        this.state = Kitronik_STOPbit.LightStates.Go;\n        this.show();\n    }\n    stop(){\n        if (this.state === Kitronik_STOPbit.LightStates.Stop){\n            return;\n        }\n        this.state = Kitronik_STOPbit.LightStates.GetReady;\n        this.show();\n        basic.pause(1500)\n        this.state = Kitronik_STOPbit.LightStates.Stop;\n        this.show();\n    }\n}\n\nenum CrossRoadKind {Line, Cross, T}\nenum CrossRoadPosition {A, B, C, D}\n\nfunction getCrossRoadPosition(position:string):CrossRoadPosition {\n    switch (position) {\n        case 'A':\n        case '0': return CrossRoadPosition.A;\n        case 'B':\n        case '1': return CrossRoadPosition.B;\n        case 'C':\n        case '2': return CrossRoadPosition.C;\n        case 'D':\n        case '3': return CrossRoadPosition.D;\n        default: return CrossRoadPosition.A;\n    }\n}\n\nclass Fire{\n    constructor(private id:number,private position:CrossRoadPosition){}\n    equals(f:Fire):boolean{\n        return f.id === this.id;\n    }\n}\n\nclass LightManager{\n    transmit: RadioTransmit\n    receiver: RadioReceiver\n    light:Light\n    id:number\n    fires:Fire[] = []\n    waitAccess:boolean = false\n    state: Kitronik_STOPbit.LightStates = Kitronik_STOPbit.LightStates.Stop\n    constructor(public group: number, public crossRoadKind: CrossRoadKind, public position: CrossRoadPosition){\n        this.transmit = new RadioTransmit(this);\n        this.receiver = new RadioReceiver(this);\n        this.light = new Light();\n        this.id = randint(0,1000)\n        input.onButtonPressed(Button.A,()=>this.askAccess())\n        this.transmit.hello();\n    }\n    askAccess(){\n        if(this.light.state === Kitronik_STOPbit.LightStates.Go){\n            return;\n        }\n        this.waitAccess = true;\n        this.transmit.askAccess()\n    }\n    notifyHello(id:number, position:CrossRoadPosition){\n        // store every player id with position\n        if(!this.fires.some(f=>f.equals(new Fire(id, position)))){\n            this.fires.push(new Fire(id, position))\n            // Say hello again\n            this.transmit.hello()\n            basic.showNumber(this.fires.length)\n        }\n    }\n    canPass(){\n        if(this.light.state !== Kitronik_STOPbit.LightStates.Stop || !this.waitAccess){\n            return;\n        }\n        \n        // Check if enough answer is received\n        this.waitAccess = false;\n        this.light.start();\n    }\n    receiveAskAccess(id:number, position:CrossRoadPosition){\n        if(position === this.position){\n            return;\n        }\n        if(this.light.state === Kitronik_STOPbit.LightStates.Stop){\n            // Already stop\n            return this.transmit.sayStopped()            \n        }\n        this.transmit.sayGonnaStop();\n        this.launchStop();\n    }\n    launchStop(){\n        this.light.stop();\n        pause(1000);\n        this.transmit.sayStopped();\n    }\n}\n\nenum Event {\n    HELLO = 0,\n    ASK_ACCESS = 1,\n    STOPPED = 2,\n    TO_STOP = 3\n\n}\n\n// Send messages to all\nclass RadioTransmit{\n    constructor(private manager: LightManager){\n        radio.setGroup(manager.group)\n        radio.setFrequencyBand(manager.group)\n    }\n    send(event:Event) {\n        radio.sendString(`${event}:${this.manager.id}:${this.manager.group}:${this.manager.position}`)\n    }\n    askAccess(){\n        this.send(Event.ASK_ACCESS);\n    }\n    sayStopped(){\n        this.send(Event.STOPPED);\n    }\n    sayGonnaStop(){\n        this.send(Event.TO_STOP);\n    }\n    hello(){\n        this.send(Event.HELLO);\n    }\n}\n\nclass RadioReceiver{\n    constructor(private manager: LightManager) { \n        radio.onReceivedString(message=>{\n            console.log(`Received ${message}`)\n            const event = parseInt(message.split(\":\")[0]);\n            const id = parseInt(message.split(\":\")[1]);\n            const group = parseInt(message.split(\":\")[2]);\n            const position = message.split(\":\")[3];\n            this.manage(event, id, group, getCrossRoadPosition(position))\n        })   \n    }\n    manage(event:number, id:number, group:number, position:CrossRoadPosition){\n        if(group !== this.manager.group){\n            return; // Ignore other group\n        }\n        switch(event){\n            case Event.ASK_ACCESS:this.manager.receiveAskAccess(id, position);break;\n            case Event.TO_STOP:break;\n            case Event.STOPPED:this.manager.canPass();break;\n            case Event.HELLO:this.manager.notifyHello(id, position);break;\n        }\n    }\n}\n\n/* Configuration */\nclass Configuration{\n    constructor(private group: number = 0, private crossRoadKind: CrossRoadKind = CrossRoadKind.Line){\n        new GroupConfig((group:number)=>this.showCrossroadTypeConfig(group));\n    }\n    showCrossroadTypeConfig(group:number){\n        this.group = group;\n        new KindConfig((kind: CrossRoadKind)=>this.showCrossroadPosition(kind));\n    }\n    showCrossroadPosition(kind: CrossRoadKind){\n        this.crossRoadKind = kind;\n        new PositionConfig((position: CrossRoadPosition) => this.complete(position),'A')\n    }\n    complete(position: CrossRoadPosition){\n        new LightManager(this.group, this.crossRoadKind, position)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass GroupConfig {\n    constructor(next:(group:number)=>void,private group:number = 0){\n        input.onButtonPressed(Button.A, () => this.increaseGroupNumber());\n        input.onButtonPressed(Button.B, ()=>next(this.group));\n        this.show();\n    }\n    increaseGroupNumber(){\n        this.group = (this.group + 1)%10;\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.group)\n    }\n}\n\n// Choose group crossroad, crossroad type, then position\nclass PositionConfig {\n    positions:string[] = ['A','B','C','D']\n    constructor(next: (position: CrossRoadPosition) => void, private position: string) {\n        input.onButtonPressed(Button.A, () => this.increasePosition());\n        input.onButtonPressed(Button.B, () => next(getCrossRoadPosition(this.position)));\n        this.show();\n    }\n    increasePosition() {\n        const pos = this.positions.indexOf(this.position);\n        this.position = this.positions[(pos+1)%4];\n        this.show();\n    }\n    show() {\n        basic.showString(this.position)\n    }\n}\n\nclass KindConfig {\n    constructor(next: (kind:CrossRoadKind) => void, private kind: CrossRoadKind = CrossRoadKind.Line) {\n        input.onButtonPressed(Button.A, () => this.increaseType());\n        input.onButtonPressed(Button.B, () => next(this.kind));\n        this.show();\n    }\n    increaseType(){\n        switch (this.kind) {\n            case CrossRoadKind.Line: this.kind = CrossRoadKind.Cross;break;\n            case CrossRoadKind.Cross: this.kind = CrossRoadKind.T; break;\n            case CrossRoadKind.T: this.kind = CrossRoadKind.Line;break;\n        }\n        this.show();\n    }\n    show(){\n        switch(this.kind){\n            case CrossRoadKind.Line:basic.showArrow(2);break;\n            case CrossRoadKind.Cross: basic.showIcon(3);break;\n            case CrossRoadKind.T: basic.showString(\"T\");break;\n        }\n    }\n}\nnew Configuration();\n","README.md":"","pxt.json":"{\n    \"name\": \"Smart city traffic light\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-kitronik-stopbit\": \"github:kitronikltd/pxt-kitronik-stopbit#v1.1.2\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1736197231878}